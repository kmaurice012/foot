function bundes() {
  const columnDefs = [];
  const columnDefs1 = [];
  let rowData = [];
  const rowObj = {};
  let rowData1 = [];
  const rowObj1 = {};
  let obj = JSON.parse(sessionStorage.bundes);
  let obj1 = JSON.parse(sessionStorage.matches);

  
  //  saving Api`s on sesion storage`

  const columnData = obj.standings[0].table[0];
  const columnData1 = obj1.matches[0];

  for (const [key, value] of Object.entries(columnData)) {
    let colObject = { field: key, sortable: true, filter: true};
    // key === 'team' ? Object.assign(rowObj, {[key]: value.name}) : Object.assign(rowObj, {[key]: value})
    columnDefs.push(colObject);
  }
  let rowArray = obj.standings[0].table;
  for (let i of rowArray) {
    // for (const [key, value] of Object.entries(i)) {
    //     key === 'team' ? Object.assign(rowObj, {[key]: value.name}) : Object.assign(rowObj, {[key]: value})

    // }
    i.team = i.team.name;
    rowData.push(i);
    // console.log(rowObj)
    // console.log(rowData);
  }
  for (const [key, value] of Object.entries(columnData1)) {
    let colObject = { field: key, sortable: true, filter: true};
    // key === 'team' ? Object.assign(rowObj, {[key]: value.name}) : Object.assign(rowObj, {[key]: value})
    columnDefs1.unshift(colObject);
  }
  let rowArray1 = obj1.matches;
  for (let i of rowArray1) {
    // for (const [key, value] of Object.entries(i)) {
    //     key === 'team' ? Object.assign(rowObj, {[key]: value.name}) : Object.assign(rowObj, {[key]: value})

    // }
    for (const [key, value] of Object.entries(i)) {

    }
    i.awayTeam = i.awayTeam.name;
    i.competition = i.competition.name;
    i.homeTeam = i.homeTeam.name;
    i.odds = 'not available';
    i.referees = 'not available';
    i.score = i.score.winner === null ? 'not available': i.score.winner;
    i.season = i.season.currentMatchday;
    i.group = i.group === null ? 'not available': i.group;
    



    rowData1.unshift(i);
    // console.log(rowObj)
    // console.log(rowData);
  }


  // specify the data
  //   const rowData = [
  //     { make: "Toyota", model: "Celica", price: 35000 },
  //     { make: "Ford", model: "Mondeo", price: 32000 },
  //     { make: "Porsche", model: "Boxter", price: 72000 },
  //   ];

  // let the grid know which columns and what data to use
  const gridOptions = {
    columnDefs: columnDefs,
    rowData: rowData,
  };

  const gridDiv = document.querySelector("#myGrid1");
  new agGrid.Grid(gridDiv, gridOptions);
  // End of Accodion table generated by an api

  const gridOptions1 = {
    columnDefs: columnDefs1,
    rowData: rowData1,
  };

  const gridDiv1 = document.querySelector("#myGridb");
  new agGrid.Grid(gridDiv1, gridOptions1);

  let container = document.getElementById("container1");
  container.style.display === "none"
    ? (container.style.display = "block")
    : (container.style.display = "none");
  let nameToDisplay = document.getElementById("name_to_display");
  console.log(("name_to_display"))
  nameToDisplay.innerHTML = document.getElementById("bundesliga").name;


  
 
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////uch
function bundes() {
  const columnDefs = [];
  let rowData = [];
  const rowObj = {};
  let obj = JSON.parse(sessionStorage.bundes);

 
  //  saving Api`s on sesion storage`

  const columnData = obj.standings[0].table[0];
  for (const [key, value] of Object.entries(columnData)) {
    let colObject = { field: key, sortable: true, filter: true};
    // key === 'team' ? Object.assign(rowObj, {[key]: value.name}) : Object.assign(rowObj, {[key]: value})
    columnDefs.push(colObject);
  }
  let rowArray = obj.standings[0].table;
  for (let i of rowArray) {
    // for (const [key, value] of Object.entries(i)) {
    //     key === 'team' ? Object.assign(rowObj, {[key]: value.name}) : Object.assign(rowObj, {[key]: value})

    // }
    i.team = i.team.name;
    rowData.push(i);
    // console.log(rowObj)
    console.log(rowData);
  }

  // specify the data
  //   const rowData = [
  //     { make: "Toyota", model: "Celica", price: 35000 },
  //     { make: "Ford", model: "Mondeo", price: 32000 },
  //     { make: "Porsche", model: "Boxter", price: 72000 },
  //   ];

  // let the grid know which columns and what data to use
  const gridOptions = {
    columnDefs: columnDefs,
    rowData: rowData,
  };

  const gridDiv = document.querySelector("#myGrid1");
  new agGrid.Grid(gridDiv, gridOptions);
  // End of Accodion table generated by an api
  let container1 = document.getElementById("container1");
  container1.style.display === "none"
    ? (container1.style.display = "block")
    : (container1.style.display = "none");
  let nameToDisplay = document.getElementById("name_to_display");
  nameToDisplay.innerHTML = document.getElementById("bundesliga").name;
}